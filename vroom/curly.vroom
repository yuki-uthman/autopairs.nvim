First make sure the correct indentation is being applied.
Enter a small, unindented function
  % void func()<cr>
  % {<cr>
  % if (true) {<cr>
  % printf("hello\n!");<cr>
  % }<cr>
  % }<cr>
Enable cindent and set tabstop and shiftwidth to 2
  :set cin ts=2 sw=2 et
  > gg=G
Now function should have a 2-space indentation:
  void func()
  {
    if (true) {
      printf("hello\n!");
    }
  }
  &
  @end
  @clear

Plugin and maktaba installation.
  :set nocompatible
  :let g:plugindir = fnamemodify($VROOMFILE, ':p:h:h')
  :let g:bootstrapfile = g:plugindir . '/bootstrap.vim'
  :execute 'source' g:bootstrapfile
  :call maktaba#LateLoad()
  :call Hello()
  ~ Hello

Source the user config.
  :execute 'source' .. g:plugindir .. '/vroom/config/default.vim'

Typing opening curly braces automatically inserts the closing pair and puts the cursor in between.
  > i{
  > key 
  > = 
  > value
  {key = value}
  @end
  @clear


Typing the closing braces would skip over.
  > i{
  > key 
  > = 
  > value}
  > .method
  {key = value}.method
  @end
  @clear


No auto close if there is a letter after the cursor.
  > ihello<Esc>I{
  {hello
  @end
  @clear

Or before the cursor.
  > ihello{
  hello{
  @end
  @clear


Deleting the opening curly braces should delete both opening and closing braces if empty.
  > i{
  > <bs>
  
  @end
  @clear


Backspace should behave normally if it is not empty.
  > i{
  > Hello<bs>
  {Hell}
  @end
  @clear


Typing space inside the empty braces would insert space on each side.
  > i{
  > <Space>
  {  }

Pressing backspace should delete the space on both side.
  > <bs>
  {}
  @end
  @clear

Even with key = value within the bracket.
  > i{
  > key 
  > = 
  > value<ESC>
  > Fki
  > <Space>
  { key = value }

  > <bs>
  {key = value}
  @end
  @clear

Typing enter inside the empty braces would insert 2 new lines and put the cursor in
the middle with correct indentation.
  > i{
  > <CR>
  {
    
  }
  @end
  @clear

  > i{
  > <CR>
  > key 
  > = 
  > value<ESC>
  {
    key = value
  }
  @end
  @clear

It should do the same even if there are items in the pair as long as you press enter
in the beginning of the item just after the opening pair.
  > i{
  >  
  > key 
  > = 
  > value<ESC>
  { key = value }

  > Fki<CR>
  {
    key = value
  }
  @end
  @clear

  > iconditions 
  > = 
  > {
  >  
  > key 
  > = 
  > value<ESC>
  conditions = { key = value }

  > Fki<CR>
  conditions = {
    key = value
  }
  @end
  @clear

Pressing enter removes extra spaces before expaning.
  > iconditions 
  > = 
  > {
  >  
  > key 
  > = 
  > value<ESC>
  conditions = { key = value }

Should not have any trailing whitespaces.
  > Fki<CR>
  conditions = {
    key = value
  }
  @end
  @clear

Should also work on pairs that are nested.
  > i{
  > <CR>
  > {
  > <CR>
  > key 
  > = 
  > value<ESC>
  {
    {
      key = value
    }
  }
  @end
  @clear

Pressing backspace on a empty pair puts closing pair back on the same line.
  > i{
  > <CR>
  {
    
  }

  > <BS>
  {}
  @end
  @clear

When there are items in the pair you can achieve the same effect by pressing
backspace in the beginning of the line, here before the letter k.
  > i{
  > <CR>
  > key 
  > = 
  > value<ESC>
  {
    key = value
  }

  > I<BS>
  {key = value}


The cursor should be placed in the begining of the line when they are put back.
  > Here 
  > is 
  > the 
  {Here is the key = value}
  @end
  @clear


This should work even if there is any punctuation symbol after the closing pair.
  > i{
  > }
  > ,<Left><Left><CR>
  > key 
  > = 
  > value<ESC>
  {
    key = value
  },

  > I<BS>
  {key = value},
  @end
  @clear



This should work also on nested pairs.
  > i{
  > <CR>
  > {
  > <CR>
  > <BS>
  {
    {}
  }
  @end
  @clear

  :set cin ts=2 sw=2 et
  > i{
  > <CR>
  > {
  > <CR>
  > key 
  > = 
  > value<ESC>I<BS>
  {
    {key = value}
  }
  @end
  @clear


